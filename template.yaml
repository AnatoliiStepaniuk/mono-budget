AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  mono_budget
  Sample SAM Template for mono_budget
Globals:
  Function:
    Timeout: 10
    MemorySize: 128
Parameters:
  MyChatId:
    Type: String
    Description: My Telegram Chat ID
  TgBotApiKey:
    Type: String
    Description: Telegram Bot Api Key
  DbName:
    Type: String
    Description: Database name
  DbUser:
    Type: String
    Description: Database username
  DbPassword:
    Type: String
    Description: Database password
  DbHost:
    Type: String
    Description: Database host
  DbPort:
    Type: String
    Description: Database port
  MonoApiKey:
    Type: String
    Description: Mono Api Key
  MonoAccountId:
    Type: String
    Description: Mono Account Id to track
Resources:
  AskCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: ask_categories.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(3 hours)
            Name: AskCategoriesTimer
  AutoSetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: auto_set_categories.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Name: AutoSetCategoriesTimer
  PeriodicErrorNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: periodic_error_notification.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:FilterLogEvents
                - logs:StartQuery
                - logs:GetQueryResults
              Resource: arn:aws:logs:eu-central-1:910504642219:log-group:/aws/lambda/*:*
            - Effect: Allow
              Action:
                - logs:DescribeLogGroups
              Resource: '*'
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        ImplicitTimer3:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Name: PeriodicErrorNotificationsTimer
  SaveMonoPreviousTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: save_mono_transactions.save_previous_transactions_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(24 hours)
            Name: SaveMonoPreviousTransactionsTimer
  MonoWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: save_mono_transactions.save_current_transaction_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        MonoWebhook:
          Type: Api
          Properties:
            Path: /mono_webhook
            Method: post
        MonoWebhookTest:
          Type: Api
          Properties:
            Path: /mono_webhook
            Method: get
  AllInOneReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: reports.all_in_one_report_lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)
            Name: BudgetReportTimer
  TelegramWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: telegram_webhook.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          MY_CHAT_ID: !Ref MyChatId
          TG_BOT_API_KEY: !Ref TgBotApiKey
          DB_NAME: !Ref DbName
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          MONO_API_KEY: !Ref MonoApiKey
          MONO_ACCOUNT_ID: !Ref MonoAccountId
      Events:
        TelegramResponse:
          Type: Api
          Properties:
            Path: /telegram_webhook
            Method: post
Outputs:
  SaveCustomCategoryApi:
    Description: API Gateway endpoint URL for Prod stage for Save Custom Category function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/telegram_webhook
  MonoWebhookApi:
    Description: API Gateway endpoint URL for Prod stage for Save Custom Category function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/mono_webhook